services:
  # Service de base de données MySQL
  mysql-db:
    image: mysql:8  # Utilise l'image officielle MySQL version 8
    container_name: mysql-db-container  # Nom personnalisé du conteneur
    environment:  # Variables d'environnement pour la configuration de MySQL
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Mot de passe root de MySQL, défini par une variable d'environnement
      MYSQL_DATABASE: ${MYSQL_DATABASE}  # Nom de la base de données initiale à créer
      MYSQL_USER: ${MYSQL_USER}  # Utilisateur de la base de données
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  # Mot de passe de l'utilisateur de la base de données
    volumes:
        - ./mysql-db/user.sql:/docker-entrypoint-initdb.d/user.sql  # Montage d'un script SQL pour initialiser la base de données
    ports:
      - 3306:3306  # Expose le port 3306 du conteneur sur le même port de l'hôte
  # Service de cache Redis
  redis-cache:
    image: redis:alpine  # Utilise l'image Redis basée sur Alpine pour une taille minimale
    container_name: redis-cache-container  # Nom personnalisé du conteneur
    command: redis-server --requirepass ${REDIS_PASSWORD}  # Lance Redis avec un mot de passe requis
    ports:
      - 6379:6379  # Expose le port 6379 du conteneur sur le même port de l'hôte
    
  # Service d'authentification
  authentication-service:
    build:  # Construit l'image à partir d'un Dockerfile spécifique
      context: .  # Contexte de build (répertoire actuel)
      dockerfile: ./server/authentication-service/Dockerfile.prod  # Chemin vers le Dockerfile
    container_name: authentication-service-container  # Nom personnalisé du conteneur
    restart: always  # Politique de redémarrage automatique
    depends_on:  # Dépendances vers d'autres services
      - mysql-db
      - redis-cache
    environment:  # Variables d'environnement pour la configuration du service
      - DB_HOST=mysql-db
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_SCHEMA=${DB_SCHEMA}
      - ACTIVE_PROFILE=${ACTIVE_PROFILE}
      - PORT=${AUTHENTICATION_SERVICE_PORT}
    links:
      - mysql-db:mysql  # Crée un lien réseau vers le service mysql-db
    expose:
      - ${AUTHENTICATION_SERVICE_PORT}  # Expose le port du service dans le réseau Docker
    ports:
      - ${AUTHENTICATION_SERVICE_PORT}:${AUTHENTICATION_SERVICE_PORT}  # Mapping de port pour l'accès extérieur
    
  # Service de données communes
  common-data-service:
    build:
      context: .
      dockerfile: ./server/common-data-service/Dockerfile.prod
    container_name: common-data-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
    environment:
      - DB_HOST=mysql-db
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_SCHEMA=${DB_SCHEMA}
      - ACTIVE_PROFILE=${ACTIVE_PROFILE}
      - PORT=${COMMON_DATA_SERVICE_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=${REDIS_PORT}
      - REACT_CLIENT_URL=${REACT_CLIENT_URL}
    links:
      - mysql-db:mysql
    expose:
      - ${COMMON_DATA_SERVICE_PORT}
    ports:
      - ${COMMON_DATA_SERVICE_PORT}:${COMMON_DATA_SERVICE_PORT}
    
  # Service de suggestions de recherche
  search-suggestion-service:
    build:
      context: .
      dockerfile: ./server/search-suggestion-service/Dockerfile.prod
    container_name: search-suggestion-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
      - common-data-service
      - authentication-service
      - payment-service
    environment:
      - ACTIVE_PROFILE=${ACTIVE_PROFILE}
      - PORT=${SEARCH_SUGGESTION_SERVICE_PORT}
      - COMMON_DATA_SERVICE_URL=http://common-data-service:${COMMON_DATA_SERVICE_PORT}
    expose:
      - ${SEARCH_SUGGESTION_SERVICE_PORT}
    ports:
      - ${SEARCH_SUGGESTION_SERVICE_PORT}:${SEARCH_SUGGESTION_SERVICE_PORT}
    
  # Service de paiement
  payment-service:
    build:
      context: .
      dockerfile: ./server/payment-service/Dockerfile.prod
    container_name: payment-service-container
    restart: always
    depends_on:
      - mysql-db
      - redis-cache
      - react-ui
    environment:
      - DB_HOST=mysql-db
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_SCHEMA=${DB_SCHEMA}
      - ACTIVE_PROFILE=${ACTIVE_PROFILE}
      - PORT=${PAYMENT_SERVICE_PORT}
    links:
      - mysql-db:mysql
    expose:
      - ${PAYMENT_SERVICE_PORT}
    ports:
      - ${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}
    
  # Interface utilisateur React
  react-ui:
    build:
      context: .
      dockerfile: ./client/Dockerfile.prod
    container_name: react-service-container
    stdin_open: true  # Permet de garder le conteneur ouvert, utile pour certains modes de développement
    restart: always
    expose:
      - ${REACT_APP_PORT}
    ports:
      - ${REACT_APP_PORT}:${REACT_APP_PORT}
    environment:
      - REACT_APP_COMMON_DATA_SERVICE_PORT=${COMMON_DATA_SERVICE_PORT}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
    volumes:
      - ./client:/usr/src/app  # Montage du code source pour le développement
      - /usr/src/app/node_modules  # Permet de conserver les node_modules à l'intérieur du conteneur
    depends_on:
      - mysql-db
      - redis-cache
